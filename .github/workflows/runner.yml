---
name: runner

on:
  push:
    branches:
    - master
    tags:
    - v*
  pull_request:
    branches:
    - master
    types:
    - opened
    - synchronize
    - reopened
  workflow_dispatch:
    inputs:
      deploy_group:
        description: Group name in inventory file
        default: dev1
      deploy_state:
        description: "One of the states: staging, current, restore, absent, balancer, sync, backup, recovery, test"
        default: staging

env:
  COVERAGE_THRESHOLD: -0.05
  COVERAGE_SUCCESS: 0.05
  COVERAGE_n125l: -1.25555555555555
  COVERAGE_p125l: 1.25555555555555
  COVERAGE_n12: -1.2
  COVERAGE_p12: 1.2
  COVERAGE_z: 0
  COVERAGE_n00101: -0.0101
  COVERAGE_p00101: 0.0101

jobs:
  select:
    runs-on: ubuntu-latest
    env:
      ALL_PROJECTS: '["all"]'
    outputs:
      projects: ${{ startsWith(github.ref, 'refs/tags/') && env.ALL_PROJECTS || steps.filter.outputs.changes }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: .github/projects.yml
    - run: |
        echo "1: ${{ -1.25555555555555 > 0.05 }}"
        echo "2: ${{ 1.25555555555555 > 0.05 }}"
        echo "3: ${{ -1.2 > 0.05 }}"
        echo "4: ${{ 1.2 > 0.05 }}"
        echo "5: ${{ 0 > 0.05 }}"
        echo "6: ${{ -0.0101 > 0.05 }}"
        echo "7: ${{ 0.0101 > 0.05 }}"
        echo "8: ${{ -1.25555555555555 > -0.05 && -1.25555555555555 <= 0.05 }}"
        echo "9: ${{ 1.25555555555555 > -0.05 &&  1.25555555555555 <= 0.05 }}"
        echo "10: ${{ -1.2 > -0.05 &&              -1.2 <= 0.05 }}"
        echo "11: ${{ 1.2 > -0.05 &&               1.2 <= 0.05 }}"
        echo "12: ${{ 0 > -0.05 &&                 0 <= 0.05 }}"
        echo "13: ${{ -0.0101 > -0.05 &&           -0.0101 }}"
        echo "14: ${{ 0.0101 > -0.05 &&            0.0101 <= 0.05 }}"
        echo "15: ${{ -1.25555555555555 <= -0.05 }}"
        echo "16: ${{ 1.25555555555555 <= -0.05 }}"
        echo "17: ${{ -1.2 <= -0.05 }}"
        echo "18: ${{ 1.2 <= -0.05 }}"
        echo "19: ${{ 0 <= -0.05 }}"
        echo "20: ${{ -0.0101 <= -0.05 }}"
        echo "21: ${{ 0.0101 <= -0.05 }}"

        echo " COVERAGE_n125l > SUCCESS: ${{ env.COVERAGE_n125l > env.COVERAGE_SUCCESS }}"
        echo " COVERAGE_p125l > SUCCESS: ${{ env.COVERAGE_p125l > env.COVERAGE_SUCCESS }}"
        echo "   COVERAGE_n12 > SUCCESS: ${{ env.COVERAGE_n12 > env.COVERAGE_SUCCESS }}"
        echo "   COVERAGE_p12 > SUCCESS: ${{ env.COVERAGE_p12 > env.COVERAGE_SUCCESS }}"
        echo "     COVERAGE_z > SUCCESS: ${{ env.COVERAGE_z > env.COVERAGE_SUCCESS }}"
        echo "COVERAGE_n00101 > SUCCESS: ${{ env.COVERAGE_n00101 > env.COVERAGE_SUCCESS }}"
        echo "COVERAGE_p00101 > SUCCESS: ${{ env.COVERAGE_p00101 > env.COVERAGE_SUCCESS }}"
        echo " COVERAGE_n125l > THRESHOLD && <= SUCCESS: ${{ env.COVERAGE_n125l > env.COVERAGE_THRESHOLD && env.COVERAGE_n125l <= env.COVERAGE_SUCCESS }}"
        echo " COVERAGE_p125l > THRESHOLD && <= SUCCESS: ${{ env.COVERAGE_p125l > env.COVERAGE_THRESHOLD && env.COVERAGE_p125l <= env.COVERAGE_SUCCESS }}"
        echo "   COVERAGE_n12 > THRESHOLD && <= SUCCESS: ${{ env.COVERAGE_n12 > env.COVERAGE_THRESHOLD && env.COVERAGE_n12 <= env.COVERAGE_SUCCESS }}"
        echo "   COVERAGE_p12 > THRESHOLD && <= SUCCESS: ${{ env.COVERAGE_p12 > env.COVERAGE_THRESHOLD && env.COVERAGE_p12 <= env.COVERAGE_SUCCESS }}"
        echo "     COVERAGE_z > THRESHOLD && <= SUCCESS: ${{ env.COVERAGE_z > env.COVERAGE_THRESHOLD && env.COVERAGE_z <= env.COVERAGE_SUCCESS }}"
        echo "COVERAGE_n00101 > THRESHOLD && <= SUCCESS: ${{ env.COVERAGE_n00101 > env.COVERAGE_THRESHOLD && env.COVERAGE_n00101 <= env.COVERAGE_SUCCESS }}"
        echo "COVERAGE_p00101 > THRESHOLD && <= SUCCESS: ${{ env.COVERAGE_p00101 > env.COVERAGE_THRESHOLD && env.COVERAGE_p00101 <= env.COVERAGE_SUCCESS }}"
        echo " COVERAGE_n125l <= THRESHOLD: ${{ env.COVERAGE_n125l <= (env.COVERAGE_THRESHOLD) }} ${{ env.COVERAGE_THRESHOLD }}"
        echo " COVERAGE_p125l <= THRESHOLD: ${{ env.COVERAGE_p125l <= env.COVERAGE_THRESHOLD }}"
        echo "   COVERAGE_n12 <= THRESHOLD: ${{ env.COVERAGE_n12 <= env.COVERAGE_THRESHOLD }}"
        echo "   COVERAGE_p12 <= THRESHOLD: ${{ env.COVERAGE_p12 <= env.COVERAGE_THRESHOLD }}"
        echo "     COVERAGE_z <= THRESHOLD: ${{ env.COVERAGE_z <= env.COVERAGE_THRESHOLD }}"
        echo "COVERAGE_n00101 <= THRESHOLD: ${{ env.COVERAGE_n00101 <= env.COVERAGE_THRESHOLD }}"
        echo "COVERAGE_p00101 <= THRESHOLD: ${{ env.COVERAGE_p00101 <= env.COVERAGE_THRESHOLD }}"

        echo
        env | sort
        echo "github.workflow: ${{ github.workflow }}"
        echo "github.job: ${{ github.job }}"
        echo "github.base_ref: ${{ github.base_ref }}"
        echo "github.base_sha: ${{ github.base_sha }}"
        echo "github.event.action: ${{ github.event.action }}"
        echo "github.event.pull_request: ${{ toJSON(github.event.pull_request) }}"
        echo "github.event.repository: ${{ toJSON(github.event.repository) }}"
        git log -n 5
    # - id: set
    #   env:
    #     PROJECTS: ${{ steps.filter.outputs.changes }}
    #   run: |
    #     if [[ $GITHUB_REF =~ '^refs/tags/' ]]; then
    #         echo '::set-output name=projects::["all"]'
    #         exit
    #     fi
    #     echo "::set-output name=projects::$PROJECTS"
  run:
    if: ${{ needs.select.outputs.projects != '[]' }}
    needs: select
    strategy:
      matrix:
        project: ${{ fromJSON(needs.select.outputs.projects) }}
    runs-on: ubuntu-latest
    steps:
    - run: |
        env | sort
        echo "matrix.project: ${{ matrix.project }}"
        echo "github.workflow: ${{ github.workflow }}"
        echo "github.job: ${{ github.job }}"
        echo "github.base_ref: ${{ github.base_ref }}"
        echo "github.event.action: ${{ github.event.action }}"
        echo "github.event.pull_request.merged: ${{ github.event.pull_request.merged }}"

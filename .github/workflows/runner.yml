---
name: runner

on:
  push:
    branches:
    - master
    tags:
    - v*
  pull_request:
    branches:
    - master
    types:
    - opened
    - synchronize
    - reopened
  workflow_dispatch:
    inputs:
      deploy_group:
        description: Group name in inventory file
        default: dev1
      deploy_state:
        description: "One of the states: staging, current, restore, absent, balancer, sync, backup, recovery, test"
        default: staging

jobs:
  select:
    runs-on: ubuntu-latest
    env:
      ALL_PROJECTS: '["all"]'
    outputs:
      projects: ${{ startsWith(github.ref, 'refs/tags/') && env.ALL_PROJECTS || steps.filter.outputs.changes }}
    steps:
    - uses: actions/checkout@v2
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: .github/projects.yml
    - run: |
        env | sort
        echo "github.action: ${{ github.action }}"
        echo "github.base_ref: ${{ github.base_ref }}"
        echo "github.base_sha: ${{ github.base_sha }}"
        echo "github.event.action: ${{ github.event.action }}"
        echo "github.event.after: ${{ github.event.after }}"
        echo "github.event.base_ref: ${{ github.event.base_ref }}"
        echo "github.event.before: ${{ github.event.before }}"
        echo "github.event.head_commit.id: ${{ github.event.head_commit.id }}"
        echo "github.event.head_commit.message: ${{ github.event.head_commit.message }}"
        echo "github.event.number: ${{ github.event.number }}"
        echo "github.event.ref: ${{ github.event.ref }}"
        echo "github.event.repository.default_branch: ${{ github.event.repository.default_branch }}"
        echo "github.event.repository.master_branch: ${{ github.event.repository.master_branch }}"
        echo "github.event.repository.name: ${{ github.event.repository.name }}"
        echo "github.event.pull_request.base: ${{ toJSON(github.event.pull_request.base) }}"
        echo "github.event.pull_request.head: ${{ toJSON(github.event.pull_request.head) }}"
        echo "github.event.pull_request.id: ${{ github.event.pull_request.id }}"
        echo "github.event.pull_request.merge_commit_sha: ${{ github.event.pull_request.merge_commit_sha }}"
        echo "github.event.pull_request.state: ${{ github.event.pull_request.state }}"
        echo "github.event.pull_request.title: ${{ github.event.pull_request.title }}"
        echo "github.event_name: ${{ github.event_name }}"
        echo "github.head_ref: ${{ github.head_ref }}"
        echo "github.job: ${{ github.job }}"
        echo "github.ref: ${{ github.ref }}"
        echo "github.repository: ${{ github.repository }}"
        echo "github.repository_owner: ${{ github.repository_owner }}"
        echo "github.run_id: ${{ github.run_id }}"
        echo "github.run_number: ${{ github.run_number }}"
        echo "github.sha: ${{ github.sha }}"
        echo "github.workflow: ${{ github.workflow }}"
        echo "github.workspace: ${{ github.workspace }}"
        git log -n 5
    # - id: set
    #   env:
    #     PROJECTS: ${{ steps.filter.outputs.changes }}
    #   run: |
    #     if [[ $GITHUB_REF =~ '^refs/tags/' ]]; then
    #         echo '::set-output name=projects::["all"]'
    #         exit
    #     fi
    #     echo "::set-output name=projects::$PROJECTS"
  run:
    if: ${{ needs.select.outputs.projects != '[]' }}
    needs: select
    strategy:
      matrix:
        project: ${{ fromJSON(needs.select.outputs.projects) }}
    runs-on: ubuntu-latest
    steps:
    - run: |
        env | sort
        echo "matrix.project: ${{ matrix.project }}"
        echo "github.workflow: ${{ github.workflow }}"
        echo "github.job: ${{ github.job }}"
        echo "github.base_ref: ${{ github.base_ref }}"
        echo "github.head_ref: ${{ github.head_ref }}"
        echo "github.event.action: ${{ github.event.action }}"
        echo "github.event.pull_request.merged: ${{ github.event.pull_request.merged }}"

    - name: Dump artifact
      if: ${{ github.head_ref == github.base_ref }}
      run: |
        mkdir -p .artifacts/${{ matrix.project }}
        echo $GITHUB_SHA > .artifacts/${{ matrix.project }}/sha
    - name: Upload artifact
      if: ${{ github.head_ref == github.base_ref }}
      uses: actions/upload-artifact@v2
      with:
        name: coverage-report-${{ matrix.project }}
        path: .artifacts/${{ matrix.project }}/sha
        retention-days: 7

    - name: Download artifact
      if: ${{ github.head_ref != github.base_ref }}
      id: base-artifact
      uses: levonet/action-download-last-artifact@B2B-253
      continue-on-error: true
      with:
        name: coverage-report-${{ matrix.project }}
        path: .artifacts/${{ matrix.project }}
    - name: Stub artifact
      if: ${{ github.head_ref != github.base_ref && steps.base-artifact.outcome == 'failure' }}
      run: |
        mkdir -p .artifacts/${{ matrix.project }}
        echo FAILURE > .artifacts/${{ matrix.project }}/sha
    - name: Test artifact
      if: ${{ github.head_ref != github.base_ref }}
      run: |
        ls -lR .artifacts
        cat .artifacts/${{ matrix.project }}/sha
